{
  "_args": [
    [
      "h5.step@~0.1.0",
      "C:\\Workspace\\walkner\\walkner-m300p"
    ]
  ],
  "_from": "h5.step@>=0.1.0 <0.2.0",
  "_id": "h5.step@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/h5.step",
  "_npmUser": {
    "email": "lukasz@walukiewicz.eu",
    "name": "morkai"
  },
  "_npmVersion": "1.1.65",
  "_phantomChildren": {},
  "_requested": {
    "name": "h5.step",
    "raw": "h5.step@~0.1.0",
    "rawSpec": "~0.1.0",
    "scope": null,
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/h5.step/-/h5.step-0.1.0.tgz",
  "_shasum": "3d4bf8e3a9a9b2e192c6855d80c9f5f76eeefc6c",
  "_shrinkwrap": null,
  "_spec": "h5.step@~0.1.0",
  "_where": "C:\\Workspace\\walkner\\walkner-m300p",
  "author": {
    "email": "lukasz@walukiewicz.eu",
    "name": "Łukasz Walukiewicz",
    "url": "http://lukasz.walukiewicz.eu/"
  },
  "bugs": {
    "url": "https://github.com/morkai/h5.step/issues"
  },
  "dependencies": {},
  "description": "Flow control for node.js and the browser.",
  "devDependencies": {
    "istanbul": "0.1.x",
    "mocha": "1.7.x",
    "requirejs": "2.1.x",
    "should": "1.2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "3d4bf8e3a9a9b2e192c6855d80c9f5f76eeefc6c",
    "tarball": "http://registry.npmjs.org/h5.step/-/h5.step-0.1.0.tgz"
  },
  "engine": [
    "node >=0.8"
  ],
  "homepage": "https://github.com/morkai/h5.step",
  "keywords": [
    "async",
    "flow",
    "h5",
    "step"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "morkai",
      "email": "lukasz@walukiewicz.eu"
    }
  ],
  "name": "h5.step",
  "optionalDependencies": {},
  "readme": "# h5.step\r\n\r\nFlow control for node.js and the browser.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install h5.step\r\n```\r\n\r\n## Usage\r\n\r\nRequire the `h5.step` module:\r\n\r\n```js\r\nvar step = require('h5.step');\r\n```\r\n\r\nCall the `step()` function with individual step functions as arguments:\r\n\r\n```js\r\nstep(\r\n  function step1()\r\n  {\r\n    console.log(\"Step 1\");\r\n  },\r\n  function step2()\r\n  {\r\n    console.log(\"Step 2\");\r\n  },\r\n  function step3()\r\n  {\r\n    console.log(\"Step 3\");\r\n  }\r\n);\r\n```\r\n\r\nEach step is executed in a shared context (`this` variable). That context is an\r\nobject with a few predefined properties (actions) that are used to change\r\nthe control flow (see API). Only one type of action can be used per step, i.e.\r\none cannot call `done()` and then `next()` in the same step function.\r\nFor example, this is invalid (`done()` AND `next()` are called):\r\n\r\n```js\r\nfunction stepN()\r\n{\r\n  this.done();\r\n  this.next();\r\n}\r\n```\r\n\r\nBut this is allowed (`done()` OR `next()` is called):\r\n\r\n```js\r\nfunction stepN(err)\r\n{\r\n  if (err)\r\n  {\r\n    return this.done();\r\n  }\r\n\r\n  setTimeout(this.next(), 1000);\r\n}\r\n```\r\n\r\nOne can also set custom properties on the context object in one step\r\nand use them in the next steps:\r\n\r\n```js\r\nstep(\r\n  function step1()\r\n  {\r\n    this.visited = [1];\r\n  },\r\n  function step2()\r\n  {\r\n   this.visited.push(2);\r\n  },\r\n  function step3()\r\n  {\r\n    this.visited.push(3);\r\n\r\n    console.log(\"Visited: %s\", this.visited.join(', '));\r\n  }\r\n);\r\n```\r\n\r\nDifferently from other flow control libraries, `h5.step` doesn't catch any\r\nexceptions to pass them as the first argument to the next step.\r\n\r\n## Usage in a browser (AMD only)\r\n\r\nTo use the library in a browser, one must install the development dependencies\r\n(or have [r.js](https://github.com/jrburke/r.js/) available in `PATH`):\r\n\r\n```\r\ncd node_modules/h5.step/\r\nnpm install\r\n```\r\n\r\nAnd then run the `amd` script:\r\n\r\n```\r\nnpm run-script amd\r\n```\r\n\r\nCopy the `lib-amd/h5.step/` directory to your project.\r\n\r\n## API\r\n\r\n### next()\r\n\r\nReturns a function that must be called before the next step is executed.\r\nAll arguments specified to that function will be passed as arguments to\r\nthe next step.\r\n\r\nThe callback can be resolved asynchronously as well as synchronously. Even if\r\nthe callback was resolved synchronously, the next step will be executed after\r\nthe current step has finished executing.\r\n\r\nOnly one `next()` call can be used per step function (as opposed to `group()`\r\nor `parallel()`).\r\n\r\nShould be used when only one operation must be run before executing the next\r\nstep.\r\n\r\n```js\r\nvar step = require('h5.step');\r\n\r\nstep(\r\n  function step1()\r\n  {\r\n    setTimeout(this.next(), 1000, 'foo');\r\n\r\n    console.log(\"#1\");\r\n  },\r\n  function step2(a)\r\n  {\r\n    console.log(\"#2 a=%s\", a);\r\n\r\n    setTimeout(this.next(), 1000, a, 'bar');\r\n  },\r\n  function step3(a, b)\r\n  {\r\n    console.log(\"#3 a=%s b=%s\", a, b);\r\n  }\r\n);\r\n\r\n// Should result in:\r\n// #1\r\n// #2 a=foo\r\n// #3 a=foo b=bar\r\n```\r\n\r\n### skip()\r\n\r\nSkips to the last step when the current one finishes executing. All arguments\r\nspecified to `skip()` will be passed as arguments to the last step.\r\n\r\nCan be used to delegate the error handling to the last step.\r\n\r\n```js\r\nvar step = require('h5.step');\r\n\r\nstep(\r\n  function step1()\r\n  {\r\n    this.skip(\"Hello World!\");\r\n\r\n    console.log(\"#1\");\r\n  },\r\n  function step2(a)\r\n  {\r\n    console.log(\"#2\");\r\n  },\r\n  function step3(a)\r\n  {\r\n    console.log(\"#3: %s\", a);\r\n  }\r\n);\r\n\r\n// Should result in:\r\n// #1\r\n// #3: Hello World!\r\n```\r\n\r\n### done()\r\n\r\nInvokes the specified callback when the current step finishes executing and\r\nstops executing any other steps. All arguments after the first one will be\r\npassed as arguments to the specified callback. If no callback was specified or\r\nthe first argument is not a function, then simply stops the chain of execution.\r\n\r\nShould be used to early call an external callback in case of an error.\r\n\r\n```js\r\nvar step = require('h5.step');\r\n\r\nfunction cb(message)\r\n{\r\n  console.log(message);\r\n}\r\n\r\nstep(\r\n  function step1()\r\n  {\r\n    this.done(cb, \"Done!\");\r\n\r\n    console.log(\"#1\");\r\n  },\r\n  function step2()\r\n  {\r\n    console.log(\"#2\");\r\n  },\r\n  function step3()\r\n  {\r\n    console.log(\"#3\");\r\n  }\r\n);\r\n\r\n// Should result in:\r\n// #1\r\n// Done!\r\n```\r\n\r\n### parallel()\r\n\r\nReturns a function that must be called before the next step is executed. Can\r\nbe used multiple times (as opposed to `next()`) and in that case, the next\r\nstep is executed only after all functions have been called.\r\n\r\nThe callbacks are expected to be called with at most two arguments, where the\r\nfirst one is an `Error` (or `null`) and the second - a result of the operation.\r\n\r\n`parallel()` collects arguments of all callbacks and when they're all resolved,\r\nthe next step is called with the first truthy argument value of any callback as\r\nthe first argument and the next arguments as values of the second argument of\r\neach callback (in order of `parallel()` calls).\r\n\r\nShould be used when multiple, fixed number of operations must be run before\r\nexecuting the next step.\r\n\r\n`parallel()` differs from `group()` only in a way the resulting values are\r\npassed to the next step.\r\n\r\n```js\r\nvar step = require('h5.step');\r\n\r\nstep(\r\n  function step1()\r\n  {\r\n    console.log(\"#1.0\");\r\n\r\n    setTimeout(this.parallel(), 200, null, 1);\r\n    setTimeout(this.parallel(), 400, null, 2);\r\n    setTimeout(this.parallel(), 600, '#3', 3);\r\n    setTimeout(this.parallel(), 800, null, 4);\r\n\r\n    console.log(\"#1.1\");\r\n  },\r\n  function step2(err, a, b, c, d)\r\n  {\r\n    console.log(\"err=%s a=%d b=%d c=%d d=%d\", err, a, b, c, d);\r\n  }\r\n);\r\n\r\n// Should result in:\r\n// #1.0\r\n// #1.1\r\n// err=#3 a=1 b=2 c=3 d=4\r\n```\r\n\r\n### group()\r\n\r\nReturns a function that must be called before the next step is executed. Can\r\nbe used multiple times (as opposed to `next()`) and in that case, the next\r\nstep is executed only after all functions have been called.\r\n\r\nThe callbacks are expected to be called with at most two arguments, where the\r\nfirst one is an `Error` (or `null`) and the second - a result of the operation.\r\n\r\n`group()` collects arguments of all callbacks and when they're all resolved,\r\nthe next step is called with the first truthy argument value of any callback as\r\nthe first argument, and an array of results (in order of `group()` calls)\r\nas the second argument.\r\n\r\nShould be used when dynamic number of operations must be run before executing\r\nthe next step.\r\n\r\n`group()` differs from `parallel()` only in a way the resulting values are\r\npassed to the next step.\r\n\r\n```js\r\nvar step = require('h5.step');\r\n\r\nstep(\r\n  function step1()\r\n  {\r\n    console.log(\"#1.0\");\r\n\r\n    for (var i = 1; i <= 4; ++i)\r\n    {\r\n      setTimeout(this.group(), i * 200, i === 3 ? '#3' : null, i);\r\n    }\r\n\r\n    console.log(\"#1.1\");\r\n  },\r\n  function step2(err, results)\r\n  {\r\n    console.log(\"err=%s results=[%s]\", err, results.join(', '));\r\n  }\r\n);\r\n\r\n// Should result in:\r\n// #1.0\r\n// #1.1\r\n// err=#3 results=[1, 2, 3, 4]\r\n```\r\n\r\n## Tests\r\n\r\nTo run the tests, clone the repository:\r\n\r\n```\r\ngit clone git://github.com/morkai/h5.step.git\r\n```\r\n\r\nInstall the development dependencies:\r\n\r\n```\r\ncd h5.step/\r\nnpm install\r\n```\r\n\r\nAnd execute the `test` script:\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nTo also generate the code coverage report, include the `--coverage` argument:\r\n\r\n```\r\nnpm test --coverage\r\n```\r\n\r\nThe coverage report will be generated to `coverage/` directory and can be viewed\r\nin the browser by opening the `h5.step/coverage/lcov-report/index.html` file.\r\n\r\n## License\r\n\r\nThis project is released under the\r\n[MIT License](https://raw.github.com/morkai/h5.step/master/license.md).\r\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/morkai/h5.step.git"
  },
  "scripts": {
    "amd": "r.js -convert lib/ lib-amd/h5.step/",
    "test": "istanbul test --root ./lib ./node_modules/mocha/bin/_mocha"
  },
  "version": "0.1.0"
}
